%% Clear

clc
clear
%close all

%% Init

dimension = 2;

nGaussian = 2;

upper = 1;

lower = 0;

globalvalue = 1;

ratio = 0.9;

global meanvector;
meanvector = [0.5, 0.5];


%-----------------------------------------------------
%% plot

% upper,lower,N, what
N = 10;
what = 3;

inc=(upper-lower)/N;

x=lower:inc:upper;     %x coordinates
y=lower:inc:upper;     %y coordinates

d=length(y);

pos=zeros(d*d,2);      %(x,y)coordinates for all sampling points

%%

for i=1:d
    
    pos((i-1)*d+1:i*d,1)=x(i)*ones(d,1);
    
end

%%

pos(:,2)=repmat(y',d,1);


%--------------------------------------------
%%

nGaussian=size(meanvector,1);  % total number of components

[p,n]=size(pos);                 % p: number of individuals; n: dimensionality

tmp=zeros(nGaussian,p);


%% calculate the values generated by each component

for i=1:nGaussian              
    
    newx=pos-repmat(meanvector(i,:),p,1);
    
    z=(newx*covmatrix_inv{i}).*newx;
           
    tmp(i,:)=sum(z,2)';        
   
end

%%

% normalize
f=exp(-0.5*tmp/n);             % f is a nGaussian-by-p matrix

%%

f=f.*repmat(optimumvalue',1,p);% multiply the peak value of each component

%%

components=f';                 % the value of each individual generated by each component

%%

fitnessvalue=max(f,[],1);      % choose the maximum values as the fitness values

%%

f = fitnessvalue;

%-------------------------------------

%%

z=vec2mat(f,d)';       %transform into a matrix

%%

if (what == 1 || what == 3)
    figure;
    display('a');
    colormap(gray);        %3D surface plot
    surfl(x,y,z);
    shading interp;
end

if (what > 1)
    figure;
    display('b');
    [C,H]=contour(x,y,z);  %2D contour plot
    colorbar;
end

